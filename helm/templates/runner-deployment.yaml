apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: runner
  name: runner
  namespace: {{ .Values.namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      run: runner
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: runner
    spec:
      containers:
        - image: "localhost:32000/enigmatick-core:v{{ $.Chart.AppVersion }}"
          imagePullPolicy: Always
          name: runner
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
            - name: RUST_LOG
              value: "debug,html5ever=info"
            - name: ENIGMATICK_ROLE
              value: "runner"
            - name: FAKTORY_URL
              value: "tcp://faktory-service.enigmatick.svc.cluster.local:7419"
            - name: AMQP_URL
              value: "amqp://rabbit-service.enigmatick.svc.cluster.local:5672/%2f"
            - name: AMQP_CONSUMER_TAG
              value: "enigmatick_social"
            - name: AMQP_QUEUE
              value: "events"
            - name: MEDIA_DIR
              value: "/srv/enigmatick/media"
            - name: DATABASE_URL
              value: "postgres://enigmatick@database-xeon.inst.cns.jdt.io/enigmatick"
            - name: SERVER_URL
              value: "https://enigmatick.social"
            - name: SERVER_NAME
              value: "enigmatick.social"
            - name: REGISTRATION_ENABLED
              value: "false"
            - name: REGISTRATION_APPROVAL_REQUIRED
              value: "true"
          volumeMounts:
          - mountPath: "/srv/enigmatick/media"
            name: media
          resources:
            requests:
              memory: "512Mi"
              cpu: "100m"
            limits:
              memory: "4Gi"
              cpu: "100m"
      volumes:
      - name: media
        persistentVolumeClaim:
          claimName: media
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
